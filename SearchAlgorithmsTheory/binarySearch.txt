 ===================
    BINARY SEARCH
 ===================

- Binary Search only works on sorted arrays
- Rather than eliminating one element at a time, you can eliminate half of the
remaining element at a time

- Binary Search Algorithm is a searching algorithm used in a sorted array by
  repeatedly dividing the search interval in half. The idea of binary search is
  to use the information that the array is sorted and reduce the time complexity
  to O(log N).

- Binary search is a search algorithm used to find the position of a target value
  within a sorted array. It works by repeatedly dividing the search interval in
  half until the target value is found or the interval is empty. 
  The search interval is halved by comparing the target element with the middle 
  value of the search space.

- The data structure must be sorted.
- Access to any element of the data structure should take constant time.

 === Binary Search Algorithm ===

- Divide the search space into two halves by finding the middle index “mid”. 
- Compare the middle element of the search space with the key. 
- If the key is found at middle element, the process is terminated.
- If the key is not found at middle element, choose which half will be used as
  the next search space.
	- If the key is smaller than the middle element, then the left side is
          used for next search.
	- If the key is larger than the middle element, then the right side is
          used for next search.
- This process is continued until the key is found or the total search space is
  exhausted.

 === How does Binary Search Algorithm work? ===

- Consider an array arr[] = {10, 11, 12, 13, 16, 23, 38, 56, 72, 91}, and the 
  target = 23.
                          
                          [23] = target value (key)
                           ||
 Step 1:  [10][11][12][13][16][23][38][56][72][91]
           ||              ||                  ||
          low = 0         mid = 4             high = 9

- In setp 1 we compare the target value with the middle of the array. If the 
  key = arr[arr.length/1] -> return index. Else we continue
- If the target value is bigger then the value in the middle we remove half of
  the array in the left
- If the target value is smaller then the value in the middle we remove half of
  the array in the right 

                                      [23] = target value (key)
                                       ||
 Step 2:  [xx][xx][xx][xx][xx][23][38][56][72][91]
                               ||      ||      ||
                              low = 5 mid = 7 high = 9

- In step 2 we shrink the array by shifting the indexes and searching for the 
  new middle. Repeate the stept form step 1

                              [23] = target value (key)
                               ||
 Step 3:  [xx][xx][xx][xx][xx][23][38][xx][xx][xx]
                               ||  ||     
                              low = 5  high = 6
                              mid = 5 
- Return index 5
